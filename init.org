#+TITLE: init
#+STARTUP: overview
* init-header
** 说明
*** 文件结构
;;; package --- init file
;;; Commentary:
;;; Code:

...这里填写配置内容...
配置文件的结尾需要添加 (provide 'commons-cfg) 来自动加载

;;; init.el ends here
*** 使用 文件加载方式管理 emacs 配置文件
;;;; ------------------------------------
;;;; 初始化
;;;; ------------------------------------

;; 添加路径 require 文件
(add-to-list 'load-path (expand-file-name (concat user-emacs-directory "etc")))

;; 当用户手动从Emacs中修改设置，系统自动生成的文件放到下面目录
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

;; 当有系统自动生成文件时，加载它
(when (file-exists-p custom-file) (load-file custom-file))

;; 不进行签名检查
;;(setq package-check-signature nil)

;;;; ------------------------------------
;;;; 加载各种单独的配置文件
;;;; ------------------------------------

(require 'me-package)              ;; 加载自定义函数变量包
(require 'melpa-cfg)               ;; 配置软件源安装包管理工具 use-package
(require 'packages-install-cfg)    ;; 安装软件包并且配置
(require 'programs-install-cfg)    ;; 安装编程语言相关包
;;(require 'pyim-install-cfg)      ;; 安装 Emacs 内置输入法
(require 'coding-systems-cfg)      ;; 配置编码格式
(require 'fonts-cfg)               ;; 配置字体
(require 'commons-cfg)             ;; 界面设定等通用配置
(require 'others-cfg)              ;; 内置包系统差异等配置
(require 'key-bindings-cfg)        ;; 自定义快捷键绑定
;;(require 'lsp-racket)            ;; 参考使用 lsp 不支持 racket
*** 使用 org-mode 文学编程管理 emacs 配置文件
;; 第一种方式
(org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org"))

;; 第二种方式
;; (require 'org)
(org-babel-load-file
    (expand-file-name "settings.org" user-emacs-directory))
** 配置
#+begin_src emacs-lisp
  ;;; init.el --- Load the full configuration -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:

#+end_src
* initialization
** 说明
添加文件路径 require 文件时告诉 emacs 目标路径
(add-to-list 'load-path (expand-file-name (concat user-emacs-directory "etc")))

当用户手动从 Emacs 中修改设置时系统自动生成的配置放到下面路径
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

当有系统自动生成配置的文件时，加载它
(when (file-exists-p custom-file) (load-file custom-file))

不进行签名检查
(setq package-check-signature nil)
** 配置
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file) (load-file custom-file))
#+end_src
* init-custom-variable
** 说明
判断操作系统类型
*is-mac*
*is-linux*
*is-windows*
** 配置
#+begin_src emacs-lisp
  (defconst *is-mac* (eq system-type 'darwin))
  (defconst *is-linux* (eq system-type 'gnu/linux))
  (defconst *is-windows*
    (or (eq system-type 'ms-dos)
        (eq system-type 'windows-nt)))
#+end_src
* init-custom-function
** 说明
*** 手动切换中文和日文输入法
  (defun zero-cycle-input-method()
    "Cycle input in emacs"
    (interactive)
    (or (boundp 'zero-input-list)
        (setq zero-input-list '("japanese-katakana" "chinese-py" "japanese")
              zero-current-input zero-input-list))
    (if (null (cdr zero-current-input))
        (setq zero-current-input zero-input-list)
      (setq zero-current-input (cdr zero-current-input)))
    (set-input-method (car zero-current-input)))
*** 复制当前行或选中的区域
  (defun zero-copy-line-or-region()
    (interactive)
    (if mark-active
        (kill-ring-save (region-beginning)
                        (region-end))
      (progn
        (kill-ring-save (line-beginning-position)
                        (line-end-position))
        (message "copied line"))))
*** 常用函数
(line-beginning-position)  (line-end-position))
(move-beginning-of-line 1) (set-mark-command nil)
(move-end-of-line 1)
(kill-ring-save (region-beginning) (region-end))
** 配置
- 刷新配置文件
#+begin_src emacs-lisp
  (defun zero-config-setup-org()
    (interactive)
    (org-babel-load-file
     (expand-file-name "init.org" user-emacs-directory)))
#+end_src
- 打开 init.el
#+begin_src emacs-lisp
  (defun zero-open-init-file()
    (interactive)
    (find-file user-init-file))
#+end_src
- 复制一行到当前行下面
#+begin_src emacs-lisp
  (defun zero-duplicate-line()
    (interactive)
    (let ((col (current-column)))
      (kill-ring-save (line-beginning-position) (line-end-position))
      (move-end-of-line 1)
      (newline)
      (yank)
      (move-to-column col)))
#+end_src
- 移动当前行到上面一行
#+begin_src emacs-lisp
  (defun zero-move-line-up()
    (interactive)
    (or (= (point-min) (line-beginning-position))
        (let ((col (current-column)))
          (transpose-lines 1)
          (previous-line 2)
          (move-to-column col))))
#+end_src
- 移动当前行到下面一行
#+begin_src emacs-lisp
  (defun zero-move-line-down()
    (interactive)
    (or (= (point-max) (+ (line-end-position) 1))
        (let ((col (current-column)))
          (next-line 1)
          (transpose-lines 1)
          (previous-line 1)
          (move-to-column col))))
#+end_src
- 移动当前单词向左
#+begin_src emacs-lisp
  (defun zero-move-word-left()
    (interactive)
    (transpose-words -1))
#+end_src
- 移动当前单词向右
#+begin_src emacs-lisp
  (defun zero-move-word-right()
    (interactive)
    (transpose-words 1))
#+end_src
- 手动切换不同字体
#+begin_src emacs-lisp
  (defun zero-cycle-font-method()
    "Cycle font in emacs"
    (interactive)
    (or (boundp 'zero-font-list)
        (setq zero-font-list '("SauceCodePro Nerd Font Mono 13" "Noto Sans Mono CJK SC Regular 13")
              zero-current-font zero-font-list))
    (if (null (cdr zero-current-font))
        (setq zero-current-font zero-font-list)
      (setq zero-current-font (cdr zero-current-font)))
    (set-frame-font (car zero-current-font))
    (message (car zero-current-font)))
#+end_src
* init-encoding
** 说明
这个如果设定了在windows下会出现莫名的乱码不认字体
(setq locale-coding-system 'utf-8)

windows下设定语言环境会出现字体混乱
(set-language-environment 'utf-8)

下面两个是设置剪切板的字符集
因为windows是utf-16-le所以设置后复制粘贴会出现乱码
(set-clipboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)

默认读取文件编码
(prefer-coding-system 'utf-8)

默认写入文件的编码格式
(set-buffer-file-coding-system 'utf-8)

新建文件编码
(set-default-coding-systems 'utf-8)

键盘输入
(set-keyboard-coding-system 'utf-8)

终端
(set-terminal-coding-system 'utf-8)

文件名
(set-file-name-coding-system 'utf-8)
** 配置
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
#+end_src
* init-fonts
** 说明
*** 字体名称
YaHei Consolas Hybrid        Source Han Sans HW SC VF
Monaco    Source Code Pro    微软雅黑Monaco
Microsoft YaHei Mono         Fira Code Regular
Inziu Roboto SC Bold         Inziu Iosevka Slab SC
Fira Code Regular 10         Source Han Sans
Sarasa Term Slab SC          文泉驿等宽正黑
Sarasa Mono Slab SC          Cascadia Code PL SemiBold
星汉等宽 CN
*** 现在正在使用的字体
Noto Sans Mono CJK SC Regular  -- 等宽等高中英文
Xiaolai Mono SC                -- 中文 26
SauceCodePro Nerd Font Mono    -- 英文 13
*** 设置字体和大小
(set-frame-font "Cascadia Code PL 13")
(set-frame-font "Fira Code Regular 13")
*** 单独设置英文字体
(set-face-attribute
    'default nil :font "SauceCodePro Nerd Font Mono 13")
*** 单独设置中文字体
(dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
            charset
            (font-spec :family "Xiaolai Mono SC" :size 26)))
*** 设置不同字体比例
  (setq face-font-rescale-alist
        '(("Fira Code" . (/ 20 12.0))
          ("Inziu Iosevka SC" . 1.2)
          ("Source Han Sans" . 1.2)))
*** 选择性的设置
  (if *is-windows*
      (progn
        (set-face-attribute 'default nil :font "Source Code Pro 12")
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset (font-spec :family "Inziu Iosevka SC" :size 22))))
    (set-face-attribute 'default nil :font "Source Code Pro 12"))

  (set-face-attribute 'default nil :font
                      (format   "%s:pixelsize=%d" "Fira Code Regular" 20))
  (dolist (charset '(kana han cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family "Source Han Sans" :size 20)))
*** 设定行间距
如果设置为整数，行间距是像素个数，如果是浮点数将会被视作相对倍数。
(setq line-spacing 1.5)
or if you want to set it globaly
(setq-default line-spacing 0.3)
** 配置
#+begin_src emacs-lisp
  (set-face-attribute
   'default nil :font "SauceCodePro Nerd Font Mono 13")

  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
                      charset
                      (font-spec :family "Xiaolai Mono SC" :size 26)))
#+end_src
* init-ui
** 说明
- 设置界面显示
  (menu-bar-mode 0)				;; 删除菜单栏
  (scroll-bar-mode 0)			;; 删除滚动条
  (tool-bar-mode 0)				;; 删除工具栏
  (size-indication-mode t)			;; 显示文件大小
  (show-paren-mode t)			;; 显示前面匹配的括号
  (electric-pair-mode t)			;; 让括号成对的出现(打左括号出现右括号)
  (toggle-truncate-lines t)                 ;; 关闭自动折行功能
- 设置功能
  (setq inhibit-startup-screen t)           ;; 关闭Emacs启动画面方法2
  (setq gnus-inhibit-startup-message t)     ;; 关闭gnus启动时的画面
  (setq initial-scratch-message "Fuck")     ;; 启动画面文字
  (setq frame-title-format "Fuck")          ;; 设置标题栏
  (mouse-avoidance-mode 'animate)           ;; 光标过来时鼠标自动离开
  (setq initial-buffer-choice "~")          ;; 设定打开emacs时的buffer是目录或是某个文件
  (setq confirm-kill-emacs 'y-or-n-p)       ;; 退出emacs时询问是否退出 'yes-or-no-p
  (setq auto-window-vscroll nil)            ;; 自动调整行高
  (setq ring-bell-function 'ignore)		;; 关闭错误提示音
  (setq auto-save-default nil)		;; 关闭自动保存文件
  (setq make-backup-files nil)		;; 关闭自动备份文件
  (setq inhibit-splash-screen t)		;; 关闭Emacs启动画面
  (delete-selection-mode t)			;; 打字时删除选中区域
  (global-hl-line-mode t)                   ;; 当前行高亮显示
  (global-auto-revert-mode t)		;; 外部修改文件后从新加载
  (setq default-directory "~/")             ;; 设置默认路径 minibuffer的
- 滚动设置
  (setq scroll-step 0)                      ;; 好像是回滚多少行 默认是0
  (setq scroll-margin 5)                    ;; 当光标上下差5行时 屏幕开始滚动
  (setq scroll-conservatively 100)          ;; 当光标在屏幕边缘时自动回滚到0中心-100不回滚
- 打开时画面大小
  (setq default-frame-alist '((width . 99) (height . 29)))
- 全屏打开Emacs
  (setq initial-frame-alist (quote ((fullscreen . maximized))))
- 减少垃圾回收次数 数值调到最大
  (setq gc-cons-threshold most-positive-fixnum)
- 显示相对行号 visual relative
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)
- 显示绝对行号 不要与相对行号同时存在
  (global-linum-mode t)
- 界面颜色，以下设置必须放在load主题后才能很好的生效
  (setq-default cursor-type 'bar)		 ;;改变光标样式
  (set-cursor-color "#FF8C00")		 ;;设置光标颜色
  (set-cursor-color "#DC143C")
  (set-background-color "black")		 ;;屏幕黑色背景
  (set-foreground-color "white")		 ;;屏幕白色前景
  (set-face-background 'region "violet")	 ;;选中区域背景色
  (set-face-background 'region "#b7ba6b")	 ;;选中区域背景色
** 配置
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (size-indication-mode t)
  (show-paren-mode t)
  (electric-pair-mode t)
  (toggle-truncate-lines t)

  (setq ring-bell-function 'ignore)
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq inhibit-splash-screen t)

  (delete-selection-mode t)
  (global-hl-line-mode t)
  (global-auto-revert-mode t)
  (setq default-directory "~/")

  (setq default-frame-alist '((width . 99) (height . 29)))

  (setq scroll-conservatively 100)
  (global-linum-mode t)

  (set-cursor-color "#DC143C")
#+end_src
* init-key-map
** 说明
取消原来默认的定义
定义自己的 keymap
将自己的keymap绑定到快捷键
facemenu-keymap 新版本好像没了这个快捷键
(define-key zero-keymap (kbd "o") 'facemenu-keymap)
** 配置
#+begin_src emacs-lisp
  (global-unset-key (kbd "M-SPC"))
  (define-prefix-command 'zero-keymap)
  (global-set-key (kbd "M-SPC") 'zero-keymap)
#+end_src
* init-source-mirror
** 说明
初始的 gnu 源 melpa emacs
("gnu" . "http://elpa.gnu.org/packages/")

清华大学镜像站点
("gnu"          . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
("melpa"        . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/")
("org"          . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
("marmalade"    . "http://mirrors.tuna.tsinghua.edu.cn/elpa/marmalade/")

          gnu   一般是必备的，其它的 elpa 中的包会依赖 gnu 中的包
        melpa   滚动升级，收录了的包的数量最大
 melpa-stable   依据源码的 Tag （Git）升级，数量比 melpa 少，因为很多包作者根本不打 Tag
          org   仅仅为了 org-plus-contrib 这一个包，org 重度用户使用
    marmalade   似乎已经不维护了，个人不推荐
** 配置
#+begin_src emacs-lisp
  (setq package-archives
        '(("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/")))
#+end_src
* use-package
** 说明
含有自动加载(###,,,autoload)，不加载也能使用
(require 'package)

初始化包管理文件，貌似新版本也自动初始化
(unless (bound-and-true-p package-initialized)
    (package-initialize))

刷新软件源
(unless package-archive-contents (package-refresh-contents))

安装包管理工具 use-package
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

加载包管理工具 use-package
(require 'use-package)

配置包管理工具 use-package
(setq use-package-always-ensure t)
(setq use-package-always-pin "melpa-stable")
(setq use-package-always-defer t)
(setq use-package-always-demand t)
(setq use-package-expand-minimally t)
(setq use-package-verbose t)

使用说明
(use-package monokai-theme
    :ensure t
    :pin melpa-stable
    :defer t
    :init (load-theme 'monokai t)
    :after (ivy)
    :bind (("M-x" . counsel-M-x))
    :config)
** 配置
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src
* install-configure-packages
** themes
- color-theme-sanityinc-tomorrow
(require 'color-theme-sanityinc-tomorrow)
M-x color-theme-sanityinc-tomorrow-day
M-x color-theme-sanityinc-tomorrow-night
M-x color-theme-sanityinc-tomorrow-blue
M-x color-theme-sanityinc-tomorrow-bright
M-x color-theme-sanityinc-tomorrow-eighties
(use-package color-theme-sanityinc-tomorrow
    :ensure t
    :defer t)
- other theme
monokai-theme 'monokai
spacemacs-theme 'spacemacs-dark
dracula-theme 'dracula
zenburn-theme 'zenburn
solarized-theme 'solarized-dark
material-theme 'material
#+begin_src emacs-lisp
  (use-package monokai-theme
    :ensure t
    :defer t
    :init (load-theme 'monokai t))
#+end_src
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :defer t
    :init (which-key-mode))
#+end_src
** ivy
:config
(setq ivy-use-virtual-buffers t)
(setq ivy-initial-inputs-alist nil)
(setq enable-recursive-minibuffers t)
(setq ivy-re-builders-alist '((t . ivy--regex-ignore-order))))
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :defer t
    :init (ivy-mode)
    :config
    (setq ivy-count-format "(%d/%d) "))
#+end_src
** counsel
:bind
("C-c g" . counsel-git)
("C-c f" . counsel-recentf)
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :after (ivy)
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer)
           ("C-x C-b" . ibuffer)
           ("C-x C-f" . counsel-find-file)))
#+end_src
** swiper
:bind
("C-r" . swiper-isearch-backward)
:config
(setq swiper-action-recenter t)
(setq swiper-include-line-number-in-search t)
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :after (ivy)
    :bind (("C-s" . swiper)))
#+end_src
** rainbow-delimiters
彩虹括号
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :init (rainbow-delimiters-mode)
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** company
:bind
(:map company-active-map
("C-n". company-select-next)
("C-p". company-select-previous)
("M-<". company-select-first)
("M->". company-select-last))
:config
(setq company-begin-commands '(self-insert-command))
(setq company-tooltip-limit 20)
(setq company-require-match nil)
(setq company-dabbrev-ignore-case t)
(setq company-dabbrev-downcase nil)
(setq company-dabbrev-other-buffers 'all)
(setq company-dabbrev-code-everywhere t)
(setq company-dabbrev-code-modes t)
(setq company-dabbrev-code-other-buffers 'all)
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0.0)
    (setq company-tooltip-offset-display 'lines)
    (setq company-show-numbers t)
    (setq company-backends
          '((company-capf
             :with company-yasnippet :separate
             company-dabbrev-code company-gtags
             company-etags company-keywords)
             company-bbdb company-semantic company-cmake
             company-clang company-files
             company-oddmuse company-dabbrev)))
#+end_src
** lsp
:hook (c++-mode . lsp-deferred)
:hook (gdscript-mode . lsp-deferred)
:hook (rust-mode . lsp-deferred)
:hook (haskell-mode . lsp-deferred)
:hook (racket-mode . lsp-deferred)
:custom
(lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
(lsp-rust-analyzer-display-parameter-hints nil)
(lsp-rust-analyzer-display-reborrow-hints nil)
:config
(setq lsp-modeline-diagnostics-enable t) ;;Project errors on modeline
(setq lsp-headerline-breadcrumb-enable-symbol-numbers t)
(setq lsp-idle-delay 0.500)
(setq lsp-log-io nil) ;;if set to true can cause a performance hit
(setq lsp-enable-file-watchers nil)
:config now
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq lsp-modeline-code-actions-segments '(count icon name))
(setq lsp-signature-render-documentation nil) ;; 关闭在minibuffer的用eldoc显示的文档
(setq lsp-completion-provider :none) ;; lsp会自动设置company的backends，需要禁止此功能
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :defer t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :commands (lsp lsp-deferred)
    :hook (go-mode . lsp-deferred)
    :hook (c-mode . lsp-deferred)
    :custom
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    :config
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024))
    (setq lsp-modeline-code-actions-segments '(count icon name))
    (setq lsp-signature-render-documentation nil)
    (setq lsp-completion-provider :none))
#+end_src
** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :after (lsp-mode)
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil)
    :commands lsp-ui-mode)
#+end_src
** lsp-ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :ensure t
    :after (lsp-mode)
    :bind
    (:map zero-keymap
          ("v" . lsp-ivy-workspace-symbol)))
#+end_src
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t)
#+end_src
** yasnippet
:config
;; main mode
(yas-global-mode 1)
;; minor mode
(yas-reload-all)
(add-hook 'prog-mode-hook #'yas-minor-mode)

;; yasnippet
;; Trigger key
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)

;; Bind `SPC' to `yas-expand' when snippet expansion available (it
;; will still call `self-insert-command' otherwise).
(define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)

;; Bind `C-c y' to `yas-expand' ONLY.
(define-key yas-minor-mode-map (kbd "C-<tab>") #'yas-expand)
(define-key yas-minor-mode-map (kbd "C-<tab>") #'company-other-backend)
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :config
    (yas-global-mode)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "C-<tab>") #'yas-expand))
#+end_src
** yasnippet-snippets
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :after (yasnippet))
#+end_src
** golang
:config
(setq gofmt-command "goimports")
(add-hook 'before-save-hook 'gofmt-before-save)

;; go-mode default tab is 8, now set to 4
(add-hook 'go-mode-hook
    (lambda ()
    ;;(setq indent-tabs-mode 1)
    (setq tab-width 4)))

配置go一些功能
;; go run
(defun go-run()
    (interactive)
    (eshell)
    (insert "go run ."))
(define-key go-mode-map (kbd "C-c C-c") 'go-run)

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
#+begin_src emacs-lisp
  (defun lsp-go-install-save-hooks ()
    (setq tab-width 4)
    (add-hook 'before-save-hook #'lsp-format-buffer)
    (add-hook 'before-save-hook #'lsp-organize-imports))

  (use-package go-mode
    :ensure t
    :defer t
    :config
    (add-hook 'go-mode-hook #'lsp-go-install-save-hooks))
#+end_src
* no-install-packages
** exec-path-from-shell
macOS解决shell和emacs路径不统一
#+begin_src emacs-lisp--
  (when (memq window-system '(mac ns))
    (use-package exec-path-from-shell
      :ensure t
      :config
      (exec-path-from-shell-initialize)))
#+end_src
** eglot
(require 'eglot)
选择服务器
(add-to-list 'eglot-server-programs '(foo-mode . ("foo-language-server" "--args")))
(add-to-list 'eglot-server-programs '(c-mode . ("clangd")))
c语言启动eglot
(add-hook 'c-mode-hook 'eglot-ensure)
绑定快捷键
(define-key eglot-mode-map (kbd "C-c h") 'eglot-help-at-point)
(define-key eglot-mode-map (kbd "C-c C-f") 'eglot-format-buffer)
(define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions)
(define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-organize-imports)
#+begin_src emacs-lisp--
  (use-package eglot
    :ensure t
    :defer 1
    :config
    (add-to-list 'eglot-server-programs '(rust-mode . ("rust-analyzer")))
    (add-hook 'rust-mode-hook 'eglot-ensure))

  (add-hook 'go-mode-hook 'eglot-ensure)

  (defun eglot-format-buffer-on-save ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t)
    (add-hook 'before-save-hook #'eglot-code-action-organize-imports -10 t))

  (add-hook 'go-mode-hook #'eglot-format-buffer-on-save)
#+end_src
** treemacs
#+begin_src emacs-lisp--
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-9") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                5000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil

            treemacs-git-mode                        nil
            )

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      ;;(when treemacs-python-executable
      ;;  (treemacs-git-commit-diff-mode t))

      ;;(pcase (cons (not (null (executable-find "git")))
      ;;             (not (null treemacs-python-executable)))
      ;;  (`(t . t)
      ;;   (treemacs-git-mode 'deferred))
      ;;  (`(t . _)
      ;;   (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-9"       . treemacs-select-window)
          ;;("C-x t 1"   . treemacs-delete-other-windows)
          ;;("C-x t t"   . treemacs)
          ;;("C-x t d"   . treemacs-select-directory)
          ;;("C-x t B"   . treemacs-bookmark)
          ;;("C-x t C-t" . treemacs-find-file)
          ;;("C-x t M-t" . treemacs-find-tag)
          )
    )
#+end_src
** magit
#+begin_src emacs-lisp--
  (use-package magit
    :ensure t
    :defer t)
#+end_src
** rust
#+begin_src emacs-lisp--
  (use-package rust-mode
    :ensure t
    :defer t
    :config
    (setq rust-format-on-save t)
    (define-key rust-mode-map (kbd "C-c C-c") 'rust-run))
#+end_src
** flycheck-rust
#+begin_src emacs-lisp--
  (use-package flycheck-rust
    :ensure t
    :defer 1)
#+end_src
** haskell
#+begin_src emacs-lisp--
  (use-package haskell-mode
    :ensure t
    :defer 1)
#+end_src
** lsp-haskell
#+begin_src emacs-lisp--
  (use-package lsp-haskell
    :ensure t
    :defer 1)

  (defun lsp-haskell-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer))
  (add-hook 'haskell-mode-hook #'lsp-haskell-install-save-hooks)

  (add-hook 'haskell-interactive-mode-hook
            (lambda () (linum-mode -1)))
#+end_src
** common-lisp-slime
#+begin_src emacs-lisp--
  (use-package slime
    :config (setq inferior-lisp-program "/usr/bin/sbcl"))
#+end_src
** racket
#+begin_src emacs-lisp--
  (use-package racket-mode
    :ensure t
    :disabled
    :defer 1)
#+end_src
** godot
(defun lsp--gdscript-ignore-errors (original-function &rest args)
  "Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
  (if (string-equal major-mode "gdscript-mode")
  (let ((json-data (nth 0 args)))
        (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
                 (not (gethash "id" json-data nil))
                 (not (gethash "method" json-data nil)))
            nil ; (message "Method not found")
          (apply original-function args)))
    (apply original-function args)))
  ;; Runs the function `lsp--gdscript-ignore-errors` around `lsp--get-message-type` to suppress unknown notification errors.
  (advice-add #'lsp--get-message-type :around #'lsp--gdscript-ignore-errors)
#+begin_src emacs-lisp--
  (use-package gdscript-mode
    :ensure t
    :config
    ;;(setq gdscript-gdformat-save-and-format t)
    ;;(setq gdscript-godot-executable "D:/ProgramFilese/godot.exe")
    (setq gdscript-use-tab-indents t)
    (setq gdscript-indent-offset 4))
#+end_src
* built-in-packages
** 代码折行
#+begin_src emacs-lisp
  (define-key zero-keymap (kbd "M-v") 'hs-toggle-hiding)
  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+end_src
** c-mode-config
*** clang-format
在 ~ 家目录创建文件 .clang-format 以下是文件的内容：

---
#BasedOnStyle: llvm
BasedOnStyle: google

#AllowShortBlocksOnASingleLine: Empty
#AllowAllParametersOfDeclarationOnNextLine: true
#AllowShortIfStatementsOnASingleLine: true
AlignArrayOfStructures: Left
AllowShortFunctionsOnASingleLine: Empty

#tab键盘的宽度
#TabWidth: 4

#缩进宽度
IndentWidth: 4

#指针和引用的对齐: Left, Right, Middle
#PointerAlignment:   Middle

#UseTab: Never
*** 配置
#+begin_src emacs-lisp
  (defun lsp-c-mode-hooks ()
    (setq c-basic-offset 4)
    (c-toggle-comment-style -1)
    (add-hook 'before-save-hook #'lsp-format-buffer))
  (add-hook 'c-mode-hook #'lsp-c-mode-hooks)
#+end_src
** 如果是windows就把默认minibuffer打开路径设置为下面的
#+begin_src emacs-lisp
  (when *is-windows*
    (setq default-directory "e:/"))
#+end_src
** eshell no need company
#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook
            (lambda ()
              (company-mode -1)))
#+end_src
** org-mode config
文字上的下划线与文字的间距加大
(setq x-underline-at-descent-line t)

把org-mode的时间显示改成英文
(setq system-time-locale "C")
(add-hook 'org-mode-hook
(lambda ()
(set (make-local-variable 'system-time-locale) "C")))

org-mode 自动折行功能
(setq truncate-lines nil)
#+begin_src emacs-lisp
  (setq org-ellipsis " ◄")
  (add-hook 'org-mode-hook
            (lambda ()
              (org-indent-mode)
              (linum-mode -1)))
#+end_src
** dired-mode config
(put 'dired-find-alternate-file 'disabled nil)

(with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)

(add-hook 'dired-mode-hook
    (lambda ()
    (define-key dired-mode-map (kbd "^")
    (lambda () (interactive) (find-alternate-file "..")))))
* custom-shortcut-keybindings
** 说明
三种配置步骤
第一种:通用隐含与leader按键绑定配置
(define-prefix-command 'my-map)
(global-set-key (kbd "M-n") 'my-map)
(global-set-key (kbd "M-n b") 'find-file)

第二种:明确与leader按键绑定配置
(define-prefix-command 'my-map)
(global-set-key (kbd "M-n") 'my-map)
(define-key my-map (kbd "b") 'find-file)

第三种:多重leader按键嵌套配置
(define-prefix-command 'my-first-map)
(define-prefix-command 'my-second-map)
(define-prefix-command 'my-thried-map)

(global-set-key (kbd "M-n") 'my-first-map)
(define-key my-first-map (kbd "M-p") 'my-second-map)
(define-key my-first-map (kbd "M-k") 'my-thried-map)

(define-key my-thried-map (kbd "!") 'save-file)
(define-key my-thried-map (kbd "k") 'write-file)
(define-key my-thried-map (kbd "kj")
   (lambda ()
     (interactive)
     (save-buffer)
     (kill-emacs)))
** 开始定义 zero-keymap
内容已经放到 init 区域
** 开始绑定 zero-keymap
在两个之间只留下一个空格
清除每一行末尾没用的空白
输入 eshell 命令
open init file
手动切换不同输入法
counsel-recentf
重复上一个命令
copy current line to below
move word line
programming format buffer
分屏窗口操作
#+begin_src emacs-lisp
  (define-key zero-keymap (kbd "n") 'just-one-space)
  (define-key zero-keymap (kbd "m") 'whitespace-cleanup)
  (define-key zero-keymap (kbd "e") 'eshell)
  (define-key zero-keymap (kbd "<f2>") 'zero-open-init-file)
  (define-key zero-keymap (kbd "x") 'zero-cycle-font-method)
  (define-key zero-keymap (kbd "r") 'counsel-recentf)
  (define-key zero-keymap (kbd "M-r") 'repeat)
  (define-key zero-keymap (kbd "M-d") 'zero-duplicate-line)

  (define-key zero-keymap (kbd "M-p") 'zero-move-line-up)
  (define-key zero-keymap (kbd "M-n") 'zero-move-line-down)
  (define-key zero-keymap (kbd "M-b") 'zero-move-word-left)
  (define-key zero-keymap (kbd "M-f") 'zero-move-word-right)

  (define-key zero-keymap (kbd "f") 'lsp-format-buffer)

  (define-key zero-keymap (kbd "wp") 'windmove-swap-states-up)
  (define-key zero-keymap (kbd "wn") 'windmove-swap-states-down)
  (define-key zero-keymap (kbd "wb") 'windmove-swap-states-left)
  (define-key zero-keymap (kbd "wf") 'windmove-swap-states-right)

  (define-key zero-keymap (kbd "w[") 'shrink-window-horizontally)
  (define-key zero-keymap (kbd "w]") 'enlarge-window-horizontally)
  (define-key zero-keymap (kbd "w;") 'shrink-window)
  (define-key zero-keymap (kbd "w'") 'enlarge-window)
  (define-key zero-keymap (kbd "w/") 'balance-windows)
#+end_src
** 开始绑定 全局功能
;; 替换mac下 alt 和 meta 建
(when *is-mac*
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'none))

;; copy line or region
(global-set-key (kbd "M-w") 'zero-copy-line-or-region)

;; open down new line  (kbd "M-RET")
(global-set-key (kbd "M-RET") (lambda () (interactive)
    (move-end-of-line nil) (newline)))

;; 手动切换不同输入法
(global-set-key (kbd "C-c x") 'zero-cycle-font-method)

;; 在Emacs中切换中文和日文
(global-set-key (kbd "M-\\") 'zero-cycle-input-method)
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-0") 'delete-window)
  (global-set-key (kbd "M-1") 'delete-other-windows)
  (global-set-key (kbd "M-2") 'split-window-below)
  (global-set-key (kbd "M-3") 'split-window-right)

  (global-set-key (kbd "M-[") 'previous-buffer)
  (global-set-key (kbd "M-]") 'next-buffer)

  (global-set-key (kbd "C-M-n") 'scroll-up-line)
  (global-set-key (kbd "C-M-p") 'scroll-down-line)
#+end_src
* init-footer
** 配置
#+begin_src emacs-lisp

  ;; Local Variables:
  ;; no-byte-compile: t
  ;; fill-column: 95
  ;; End:

  ;;; init.el ends here
#+end_src
