#+TITLE: init
#+STARTUP: overview
* 初始化
** 添加路径 require 文件
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name (concat user-emacs-directory "etc")))
#+end_src
** 当用户手动从Emacs中修改设置，系统自动生成的文件放到下面目录
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src
** 当有系统自动生成文件时，加载它
#+begin_src emacs-lisp
  (when (file-exists-p custom-file) (load-file custom-file))
#+end_src
** 不进行签名检查
#+begin_src emacs-lisp
  ;;(setq package-check-signature nil)
#+end_src
* 自定义函数变量
** 自定义变量
*** 定义判断操作系统类型的变量
#+begin_src emacs-lisp
  (defconst *is-mac* (eq system-type 'darwin))
  (defconst *is-linux* (eq system-type 'gnu/linux))
  (defconst *is-windows*
    (or (eq system-type 'ms-dos)
        (eq system-type 'windows-nt)))
#+end_src
** 自定义函数
*** go run
#+begin_src emacs-lisp
  (defun go-run()
    (interactive)
    (eshell)
    (insert "go run ."))
#+end_src
*** 打开配置文件
#+begin_src emacs-lisp
  (defun zero-open-init-file()
    (interactive)
    (find-file user-init-file))
#+end_src
*** 复制当前行或选中的区域
#+begin_src emacs-lisp
  ;; (defun zero-copy-line-or-region()
  ;;   (interactive)
  ;;   (if mark-active
  ;;       (kill-ring-save (region-beginning)
  ;; 		      (region-end))
  ;;     (progn
  ;;       (kill-ring-save (line-beginning-position)
  ;; 		      (line-end-position))
  ;;       (message "copied line"))))
#+end_src
*** 复制一行到当前行下面
#+begin_src emacs-lisp
  ;; (line-beginning-position) (line-end-position))
  (defun zero-duplicate-line()
    (interactive)
    (let ((col (current-column)))
      ;;(move-beginning-of-line 1)
      ;;(set-mark-command nil)
      ;;(move-end-of-line 1)
      ;;(kill-ring-save (region-beginning) (region-end))
      (kill-ring-save (line-beginning-position) (line-end-position))
      (move-end-of-line 1)
      (newline)
      (yank)
      (move-to-column col)))
#+end_src
** 移动函数 word line
*** 移动当前行到上面一行
#+begin_src emacs-lisp
  (defun zero-move-line-up()
    (interactive)
    (or (= (point-min) (line-beginning-position))
        (let ((col (current-column)))
          (transpose-lines 1)
          (previous-line 2)
          (move-to-column col))))
#+end_src
*** 移动当前行到下面一行
#+begin_src emacs-lisp
  (defun zero-move-line-down()
    (interactive)
    (or (= (point-max) (+ (line-end-position) 1))
        (let ((col (current-column)))
          (next-line 1)
          (transpose-lines 1)
          (previous-line 1)
          (move-to-column col))))
#+end_src
*** 移动当前单词向左
#+begin_src emacs-lisp
  (defun zero-move-word-left()
    (interactive)
    (transpose-words -1))
#+end_src
*** 移动当前单词向右
#+begin_src emacs-lisp
  (defun zero-move-word-right()
    (interactive)
    (transpose-words 1))
#+end_src
** 字体与输入法
*** 手动切换不同字体
#+begin_src emacs-lisp
  (defun zero-cycle-font-method()
    "Cycle font in emacs"
    (interactive)
    (or (boundp 'zero-font-list)
        (setq zero-font-list '("Cascadia Code PL SemiBold 13" "Noto Sans Mono CJK SC Regular 13")
              zero-current-font zero-font-list))
    (if (null (cdr zero-current-font))
        (setq zero-current-font zero-font-list)
      (setq zero-current-font (cdr zero-current-font)))
    (set-frame-font (car zero-current-font))
    (message (car zero-current-font)))
#+end_src
*** 手动切换中文和日文输入法
#+begin_src emacs-lisp
  ;; (defun zero-cycle-input-method()
  ;;   "Cycle input in emacs"
  ;;   (interactive)
  ;;   (or (boundp 'zero-input-list)
  ;;       (setq zero-input-list '("japanese-katakana" "chinese-py" "japanese")
  ;; 	    zero-current-input zero-input-list))
  ;;   (if (null (cdr zero-current-input))
  ;;       (setq zero-current-input zero-input-list)
  ;;     (setq zero-current-input (cdr zero-current-input)))
  ;;   (set-input-method (car zero-current-input)))
#+end_src

* 配置软件源镜像
初始的 gnu 源 melpa emacs
("gnu" . "http://elpa.gnu.org/packages/")

清华大学镜像站点
("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/")
("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
("marmalade" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/marmalade/")

          gnu 一般是必备的，其它的 elpa 中的包会依赖 gnu 中的包
        melpa 滚动升级，收录了的包的数量最大
 melpa-stable 依据源码的 Tag （Git）升级，数量比 melpa 少，因为很多包作者根本不打 Tag
          org 仅仅为了 org-plus-contrib 这一个包，org 重度用户使用
    marmalade 似乎已经不维护了，个人不推荐
#+begin_src emacs-lisp
  (setq package-archives
        '(("gnu"		. "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("melpa"              . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("melpa-stable"	. "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/")))
#+end_src
* 安装包管理配置
#+begin_src emacs-lisp
  ;; 含有自动加载(###,,,autoload)，不加载也能使用
  ;;(require 'package)

  ;; 初始化包管理文件，貌似新版本也自动初始化
  (unless (bound-and-true-p package-initialized)
    (package-initialize))

  ;; 刷新软件源
  (unless package-archive-contents (package-refresh-contents))

  ;; 安装包管理工具 use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; 加载包管理工具 use-package
  ;;(require 'use-package)

  ;; 配置包管理工具 use-package
  ;;(setq use-package-always-ensure t)
  ;;(setq use-package-always-pin "melpa-stable")
  ;;(setq use-package-always-defer t)
  ;;(setq use-package-always-demand t)
  ;;(setq use-package-expand-minimally t)
  ;;(setq use-package-verbose t)
#+end_src
