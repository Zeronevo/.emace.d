#+TITLE: init
#+STARTUP: overview
* 初始化
** 添加路径 require 文件
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name (concat user-emacs-directory "etc")))
#+end_src
** 当用户手动从Emacs中修改设置，系统自动生成的文件放到下面目录
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src
** 当有系统自动生成文件时，加载它
#+begin_src emacs-lisp
  (when (file-exists-p custom-file) (load-file custom-file))
#+end_src
** 不进行签名检查
#+begin_src emacs-lisp
  ;;(setq package-check-signature nil)
#+end_src
* 自定义函数变量
** 自定义变量
*** 定义判断操作系统类型的变量
#+begin_src emacs-lisp
  (defconst *is-mac* (eq system-type 'darwin))
  (defconst *is-linux* (eq system-type 'gnu/linux))
  (defconst *is-windows*
    (or (eq system-type 'ms-dos)
        (eq system-type 'windows-nt)))
#+end_src
** 自定义函数
*** go run
#+begin_src emacs-lisp
  (defun go-run()
    (interactive)
    (eshell)
    (insert "go run ."))
#+end_src
*** 打开配置文件
#+begin_src emacs-lisp
  (defun zero-open-init-file()
    (interactive)
    (find-file user-init-file))
#+end_src
*** 复制当前行或选中的区域
#+begin_src emacs-lisp
  ;; (defun zero-copy-line-or-region()
  ;;   (interactive)
  ;;   (if mark-active
  ;;       (kill-ring-save (region-beginning)
  ;; 		      (region-end))
  ;;     (progn
  ;;       (kill-ring-save (line-beginning-position)
  ;; 		      (line-end-position))
  ;;       (message "copied line"))))
#+end_src
*** 复制一行到当前行下面
#+begin_src emacs-lisp
  ;; (line-beginning-position) (line-end-position))
  (defun zero-duplicate-line()
    (interactive)
    (let ((col (current-column)))
      ;;(move-beginning-of-line 1)
      ;;(set-mark-command nil)
      ;;(move-end-of-line 1)
      ;;(kill-ring-save (region-beginning) (region-end))
      (kill-ring-save (line-beginning-position) (line-end-position))
      (move-end-of-line 1)
      (newline)
      (yank)
      (move-to-column col)))
#+end_src
** 移动函数 word line
*** 移动当前行到上面一行
#+begin_src emacs-lisp
  (defun zero-move-line-up()
    (interactive)
    (or (= (point-min) (line-beginning-position))
        (let ((col (current-column)))
          (transpose-lines 1)
          (previous-line 2)
          (move-to-column col))))
#+end_src
*** 移动当前行到下面一行
#+begin_src emacs-lisp
  (defun zero-move-line-down()
    (interactive)
    (or (= (point-max) (+ (line-end-position) 1))
        (let ((col (current-column)))
          (next-line 1)
          (transpose-lines 1)
          (previous-line 1)
          (move-to-column col))))
#+end_src
*** 移动当前单词向左
#+begin_src emacs-lisp
  (defun zero-move-word-left()
    (interactive)
    (transpose-words -1))
#+end_src
*** 移动当前单词向右
#+begin_src emacs-lisp
  (defun zero-move-word-right()
    (interactive)
    (transpose-words 1))
#+end_src
** 字体与输入法
*** 手动切换不同字体
#+begin_src emacs-lisp
  (defun zero-cycle-font-method()
    "Cycle font in emacs"
    (interactive)
    (or (boundp 'zero-font-list)
        (setq zero-font-list '("Cascadia Code PL SemiBold 13" "Noto Sans Mono CJK SC Regular 13")
              zero-current-font zero-font-list))
    (if (null (cdr zero-current-font))
        (setq zero-current-font zero-font-list)
      (setq zero-current-font (cdr zero-current-font)))
    (set-frame-font (car zero-current-font))
    (message (car zero-current-font)))
#+end_src
*** 手动切换中文和日文输入法
#+begin_src emacs-lisp
  ;; (defun zero-cycle-input-method()
  ;;   "Cycle input in emacs"
  ;;   (interactive)
  ;;   (or (boundp 'zero-input-list)
  ;;       (setq zero-input-list '("japanese-katakana" "chinese-py" "japanese")
  ;; 	    zero-current-input zero-input-list))
  ;;   (if (null (cdr zero-current-input))
  ;;       (setq zero-current-input zero-input-list)
  ;;     (setq zero-current-input (cdr zero-current-input)))
  ;;   (set-input-method (car zero-current-input)))
#+end_src

* 配置软件源镜像
初始的 gnu 源 melpa emacs
("gnu" . "http://elpa.gnu.org/packages/")

清华大学镜像站点
("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/")
("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
("marmalade" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/marmalade/")

          gnu 一般是必备的，其它的 elpa 中的包会依赖 gnu 中的包
        melpa 滚动升级，收录了的包的数量最大
 melpa-stable 依据源码的 Tag （Git）升级，数量比 melpa 少，因为很多包作者根本不打 Tag
          org 仅仅为了 org-plus-contrib 这一个包，org 重度用户使用
    marmalade 似乎已经不维护了，个人不推荐
#+begin_src emacs-lisp
  (setq package-archives
        '(("gnu"		. "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("melpa"              . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("melpa-stable"	. "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/")))
#+end_src
* 安装包管理配置
#+begin_src emacs-lisp
  ;; 含有自动加载(###,,,autoload)，不加载也能使用
  ;;(require 'package)

  ;; 初始化包管理文件，貌似新版本也自动初始化
  (unless (bound-and-true-p package-initialized)
    (package-initialize))

  ;; 刷新软件源
  (unless package-archive-contents (package-refresh-contents))

  ;; 安装包管理工具 use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; 加载包管理工具 use-package
  ;;(require 'use-package)

  ;; 配置包管理工具 use-package
  ;;(setq use-package-always-ensure t)
  ;;(setq use-package-always-pin "melpa-stable")
  ;;(setq use-package-always-defer t)
  ;;(setq use-package-always-demand t)
  ;;(setq use-package-expand-minimally t)
  ;;(setq use-package-verbose t)
#+end_src

* 安装软件包并且配置
** exec-path-from-shell
macOS解决shell和emacs路径不统一
#+begin_src emacs-lisp
  (when (memq window-system '(mac ns))
    (use-package exec-path-from-shell
      :ensure t
      ;; :pin melpa-stable
      :config
      (exec-path-from-shell-initialize)))
#+end_src
** dracula-theme主题
#+begin_src emacs-lisp
  (use-package dracula-theme
    :ensure t
    ;; :pin melpa-stable
    :config
    (load-theme 'dracula t))
#+end_src
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    ;; :pin melpa-stable
    :config
    (which-key-mode))
#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    ;; :pin melpa-stable
    :config
    (ivy-mode)
    ;; (setq ivy-use-virtual-buffers t)
    ;; (setq ivy-initial-inputs-alist nil)
    ;; (setq enable-recursive-minibuffers t)
    ;; (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order))))
    (setq ivy-count-format "(%d/%d) "))
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    ;; :pin melpa-stable
    :after (ivy)
    :bind (("M-x" . counsel-M-x)
           ;;("C-c g" . counsel-git)
           ;;("C-c f" . counsel-recentf)
           ("C-x b" . counsel-switch-buffer)
           ("C-x C-b" . ibuffer)
           ("C-x C-f" . counsel-find-file)))
#+end_src
** swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    ;; :pin melpa-stable
    :after (ivy)
    :bind (;;("C-r" . swiper-isearch-backward)
           ("C-s" . swiper)))
    ;; :config
    ;; (setq swiper-action-recenter t)
    ;; (setq swiper-include-line-number-in-search t)
#+end_src
** 彩虹括号等
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    ;; :pin melpa-stable
    :defer 1
    :config
    (rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** company
#+begin_src emacs-lisp
  ;; :bind
  ;;   (:map company-active-map
  ;; 	      ("C-n". company-select-next)
  ;; 	      ("C-p". company-select-previous)
  ;; 	      ("M-<". company-select-first)
  ;; 	      ("M->". company-select-last))
  (use-package company
    :ensure t
    ;;:pin melpa-stable
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    ;;(setq company-begin-commands '(self-insert-command))
    ;;(setq company-tooltip-limit 20)
    ;;(setq company-require-match nil)
    ;;(setq company-dabbrev-ignore-case t)
    ;;(setq company-dabbrev-downcase nil)
    ;;(setq company-dabbrev-other-buffers 'all)
    ;;(setq company-dabbrev-code-everywhere t)
    ;;(setq company-dabbrev-code-modes t)
    ;;(setq company-dabbrev-code-other-buffers 'all)
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0.0)
    (setq company-tooltip-offset-display 'lines)
    (setq company-show-numbers t)
    (setq company-backends
          '(
             (company-capf 
             :with company-yasnippet :separate
             company-dabbrev-code company-gtags
             company-etags company-keywords)
             company-bbdb company-semantic company-cmake
             company-clang company-files
             company-oddmuse company-dabbrev
            )))
#+end_src
** eglot
#+begin_src emacs-lisp
  ;;(require 'eglot)
  ;; 选择服务器
  ;; (add-to-list 'eglot-server-programs '(foo-mode . ("foo-language-server" "--args")))
  ;;(add-to-list 'eglot-server-programs '(c-mode . ("clangd")))
  ;; c语言启动eglot
  ;;(add-hook 'c-mode-hook 'eglot-ensure)
  ;; 绑定快捷键
  ;;(define-key eglot-mode-map (kbd "C-c h") 'eglot-help-at-point)
  ;;(define-key eglot-mode-map (kbd "C-c C-f") 'eglot-format-buffer)
  ;;(define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions)
  ;;(define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-organize-imports)

  ;; (use-package eglot
  ;;   :ensure t
  ;;   :defer 1
  ;;   :config
  ;;   (add-to-list 'eglot-server-programs '(rust-mode . ("rust-analyzer")))
  ;;   (add-hook 'rust-mode-hook 'eglot-ensure))
  ;;   ;; golang
  ;;   (add-hook 'go-mode-hook 'eglot-ensure))

  ;; (defun eglot-format-buffer-on-save ()
  ;;   (add-hook 'before-save-hook #'eglot-format-buffer -10 t)
  ;;   (add-hook 'before-save-hook #'eglot-code-action-organize-imports -10 t))
  ;; (add-hook 'go-mode-hook #'eglot-format-buffer-on-save)
#+end_src
** lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    ;;:pin melpa-stable
    :defer 1
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :commands (lsp lsp-deferred)
    :hook (go-mode . lsp-deferred)
    ;;:hook (gdscript-mode . lsp-deferred)
    ;;:hook (rust-mode . lsp-deferred)
    ;;:hook (haskell-mode . lsp-deferred)
    ;;:hook (racket-mode . lsp-deferred)
    :custom
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    ;;(lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    ;;(lsp-rust-analyzer-display-parameter-hints nil)
    ;;(lsp-rust-analyzer-display-reborrow-hints nil)
    :config
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (setq lsp-modeline-code-actions-segments '(count icon name))
    ;;(setq lsp-modeline-diagnostics-enable t) ;;Project errors on modeline
    ;;(setq lsp-headerline-breadcrumb-enable-symbol-numbers t)
    ;;(setq lsp-idle-delay 0.500)
    ;;(setq lsp-log-io nil) ;;if set to true can cause a performance hit
    ;;(setq lsp-enable-file-watchers nil)
    (setq lsp-signature-render-documentation nil) ;; 关闭在minibuffer的用eldoc显示的文档
    (setq lsp-completion-provider :none) ;; lsp会自动设置company的backends，需要禁止此功能
    )
#+end_src
** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil)
    :commands lsp-ui-mode)
#+end_src
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    ;;:pin melpa-stable
    :defer 1)
#+end_src
** flycheck-rust
#+begin_src emacs-lisp
  ;; (use-package flycheck-rust
  ;;   :ensure t
  ;;   ;;:pin melpa-stable
  ;;   :defer 1)
#+end_src
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    ;;:pin melpa-stable
    :config
    ;; main mode
    ;;(yas-global-mode 1)
    ;; minor mode
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))
#+end_src
** yasnippet-snippets
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    ;;:pin melpa-stable
    :defer 1)
#+end_src
** haskell
#+begin_src emacs-lisp
  ;; (use-package haskell-mode
  ;;   :ensure t
  ;;   :defer 1
  ;;   )
#+end_src
** lsp-haskell
#+begin_src emacs-lisp
  ;; (use-package lsp-haskell
  ;;   :ensure t
  ;;   :defer 1
  ;;   )

  ;; (defun lsp-haskell-install-save-hooks ()
  ;;   (add-hook 'before-save-hook #'lsp-format-buffer))
  ;; (add-hook 'haskell-mode-hook #'lsp-haskell-install-save-hooks)

  ;; (add-hook 'haskell-interactive-mode-hook
  ;; 	  (lambda () (linum-mode -1)))
#+end_src
** common lisp slime
#+begin_src emacs-lisp
  ;;(use-package slime
  ;;  :config (setq inferior-lisp-program "/usr/bin/sbcl"))
#+end_src
** rust
#+begin_src emacs-lisp
  ;; (use-package rust-mode
  ;;   :ensure t
  ;;   :defer 1
  ;;   :config
  ;;   (setq rust-format-on-save t)
  ;;   (define-key rust-mode-map (kbd "C-c C-c") 'rust-run)
  ;;   )
#+end_src
** racket
#+begin_src emacs-lisp
  ;; (use-package racket-mode
  ;;   :ensure t
  ;;   :defer 1)
#+end_src
** golang
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    ;; :pin melpa
    :defer 1)

  ;;:config
  ;;(setq gofmt-command "goimports")
  ;;(add-hook 'before-save-hook 'gofmt-before-save)

  ;; go-mode default tab is 8, now set to 4
  ;; (add-hook 'go-mode-hook
  ;;           (lambda ()
  ;;             ;;(setq indent-tabs-mode 1)
  ;;             (setq tab-width 4)))

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (setq tab-width 4)
    (define-key go-mode-map (kbd "C-c C-c") 'go-run)
    (add-hook 'before-save-hook #'lsp-format-buffer)
    (add-hook 'before-save-hook #'lsp-organize-imports))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src
** godot
#+begin_src emacs-lisp
  (use-package gdscript-mode
    :ensure t
    :config
    ;;(setq gdscript-gdformat-save-and-format t)
    ;;(setq gdscript-godot-executable "D:/ProgramFilese/godot.exe")
    (setq gdscript-use-tab-indents t)
    (setq gdscript-indent-offset 4)
    )

  ;; (defun lsp--gdscript-ignore-errors (original-function &rest args)
  ;; "Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
  ;; (if (string-equal major-mode "gdscript-mode")
  ;;     (let ((json-data (nth 0 args)))
  ;;       (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
  ;;                (not (gethash "id" json-data nil))
  ;;                (not (gethash "method" json-data nil)))
  ;;           nil ; (message "Method not found")
  ;;         (apply original-function args)))
  ;;   (apply original-function args)))
  ;; ;; Runs the function `lsp--gdscript-ignore-errors` around `lsp--get-message-type` to suppress unknown notification errors.
  ;; (advice-add #'lsp--get-message-type :around #'lsp--gdscript-ignore-errors)
#+end_src
** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-9") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                5000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil

          treemacs-git-mode                        nil
          )

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    ;;(when treemacs-python-executable
    ;;  (treemacs-git-commit-diff-mode t))

    ;;(pcase (cons (not (null (executable-find "git")))
    ;;             (not (null treemacs-python-executable)))
    ;;  (`(t . t)
    ;;   (treemacs-git-mode 'deferred))
    ;;  (`(t . _)
    ;;   (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-9"       . treemacs-select-window)
        ;;("C-x t 1"   . treemacs-delete-other-windows)
        ;;("C-x t t"   . treemacs)
        ;;("C-x t d"   . treemacs-select-directory)
        ;;("C-x t B"   . treemacs-bookmark)
        ;;("C-x t C-t" . treemacs-find-file)
        ;;("C-x t M-t" . treemacs-find-tag)
        )
  )
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src
